'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var accept = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(req, res, next) {
    var match, client, result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(req.url === '/status')) {
              _context.next = 4;
              break;
            }

            onDigits(req, res);
            centralSystem.onStatusUpdate = function () {
              return onDigits(req, res);
            };
            return _context.abrupt('return');

          case 4:
            match = void 0;

            if (!(match = req.url.match(/\/connector\/(\d+)\/(\d+)/))) {
              _context.next = 14;
              break;
            }

            client = centralSystem.clients[+match[1]];

            if (!client) {
              _context.next = 12;
              break;
            }

            _context.next = 10;
            return centralSystem.toggleChargePoint(client, +match[2]);

          case 10:
            result = _context.sent;

            res.write((0, _stringify2.default)({}));

          case 12:
            res.end();
            return _context.abrupt('return');

          case 14:

            _fs2.default.readFile(__dirname + '/index.html', function (err, file) {
              if (err) {
                return next(err);
              }

              // res.set('Content-type', 'text/html');
              res.write(file);
              res.end();
            });

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function accept(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _centralSystem = require('./centralSystem');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//var fileServer = new(require('node-static')).Server('.');

process.on('uncaughtException', function (err) {
  console.log('Caught exception: ' + err);
});
process.on('unhandledRejection', function (reason, p) {
  console.log("Possibly Unhandled Rejection at: Promise ", p, " reason: ", reason);
});

var server = _http2.default.createServer(accept);
var centralSystem = (0, _centralSystem.createServer)(server);

server.listen(process.env.PORT || 9220);

function onDigits(req, res) {
  res.writeHead(200, {
    'Content-Type': 'text/event-stream; charset=utf-8',
    'Cache-Control': 'no-cache'
  });

  var timer = setInterval(write, 1000);
  write();

  function write() {
    var data = centralSystem.clients.map(function (client) {
      return client.info;
    });
    res.write('data: ' + (0, _stringify2.default)(data) + '\n\n');
  }
}
//# sourceMappingURL=server.js.map