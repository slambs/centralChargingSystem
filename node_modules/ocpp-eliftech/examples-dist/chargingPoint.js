"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var run = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
    var _this = this;

    var startTransaction = function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref3) {
        var connectorId = _ref3.connectorId;
        var idTag, authCommand, statusCommand, startCommand;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                idTag = 'test';
                authCommand = new _dist.OCPPCommands.Authorize({
                  idTag: idTag
                });
                _context2.next = 4;
                return client.send(authCommand);

              case 4:
                statusCommand = new _dist.OCPPCommands.StatusNotification({
                  connectorId: connectorId,
                  errorCode: StatusNotificationConst.ERRORCODE_NOERROR,
                  status: StatusNotificationConst.STATUS_CHARGING
                });
                _context2.next = 7;
                return client.send(statusCommand);

              case 7:
                startCommand = new _dist.OCPPCommands.StartTransaction({
                  connectorId: connectorId,
                  idTag: idTag,
                  meterStart: 0,
                  timestamp: new Date().toISOString()
                });
                _context2.next = 10;
                return client.send(startCommand);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function startTransaction(_x2) {
        return _ref4.apply(this, arguments);
      };
    }();

    var stopTransaction = function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(_ref5) {
        var transactionId = _ref5.transactionId;
        var statusCommand, startCommand;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                statusCommand = new _dist.OCPPCommands.StatusNotification({
                  connectorId: transactionId,
                  errorCode: StatusNotificationConst.ERRORCODE_NOERROR,
                  status: StatusNotificationConst.STATUS_AVAILABLE
                });
                _context3.next = 3;
                return client.send(statusCommand);

              case 3:
                startCommand = new _dist.OCPPCommands.StopTransaction({
                  transactionId: transactionId,
                  meterStop: 1,
                  timestamp: new Date().toISOString()
                });
                _context3.next = 6;
                return client.send(startCommand);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function stopTransaction(_x3) {
        return _ref6.apply(this, arguments);
      };
    }();

    var connector1, connector2, client, boot, answer;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            connector1 = new _dist.Connector(1);
            connector2 = new _dist.Connector(2);
            client = new _dist.ChargePoint({
              centralSystemUrl: "http://localhost:9220/webServices/ocpp/CP" + Math.floor(Math.random() * 9999),
              // centralSystemUrl: `https://ocpp-example.herokuapp.com/webServices/ocpp/CP${Math.floor(Math.random() * 9999)}`,
              connectors: [connector1, connector2]
            });
            _context4.prev = 3;
            _context4.next = 6;
            return client.connect();

          case 6:

            client.onRequest = function () {
              var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(command) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.t0 = true;
                        _context.next = _context.t0 === command instanceof _dist.OCPPCommands.RemoteStartTransaction ? 3 : _context.t0 === command instanceof _dist.OCPPCommands.RemoteStopTransaction ? 5 : 7;
                        break;

                      case 3:
                        setTimeout(function () {
                          return startTransaction(command);
                        }, 1);
                        return _context.abrupt("return", {
                          status: RemoteStartTransactionConst.STATUS_ACCEPTED
                        });

                      case 5:
                        setTimeout(function () {
                          return stopTransaction(command);
                        }, 1);
                        return _context.abrupt("return", {
                          status: RemoteStartTransactionConst.STATUS_ACCEPTED
                        });

                      case 7:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, _this);
              }));

              return function (_x) {
                return _ref2.apply(this, arguments);
              };
            }();

            boot = new _dist.OCPPCommands.BootNotification({
              chargePointVendor: 'BrandX',
              chargeBoxSerialNumber: 'SR' + Math.round(Math.random() * 100000),
              chargePointSerialNumber: '123',
              chargePointModel: '12'
            });
            _context4.next = 10;
            return client.send(boot);

          case 10:
            answer = _context4.sent;
            _context4.next = 13;
            return client.sendCurrentStatus();

          case 13:
            _context4.next = 18;
            break;

          case 15:
            _context4.prev = 15;
            _context4.t0 = _context4["catch"](3);

            console.error('--- Err', _context4.t0);

          case 18:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[3, 15]]);
  }));

  return function run() {
    return _ref.apply(this, arguments);
  };
}();

var _dist = require("../dist");

var _BootNotification = require("../dist/commands/BootNotification");

var BootNotificationConst = _interopRequireWildcard(_BootNotification);

var _StatusNotification = require("../dist/commands/StatusNotification");

var StatusNotificationConst = _interopRequireWildcard(_StatusNotification);

var _RemoteStartTransaction = require("../dist/commands/RemoteStartTransaction");

var RemoteStartTransactionConst = _interopRequireWildcard(_RemoteStartTransaction);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.on('uncaughtException', function (err) {
  console.log('Caught exception: ' + err);
});
process.on('unhandledRejection', function (reason, p) {
  console.log("Possibly Unhandled Rejection at: Promise ", p, " reason: ", reason);
});

run();
//# sourceMappingURL=chargingPoint.js.map