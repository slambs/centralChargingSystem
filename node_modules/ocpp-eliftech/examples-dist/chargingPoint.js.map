{"version":3,"sources":["../examples/chargingPoint.js"],"names":["connectorId","idTag","authCommand","OCPPCommands","Authorize","client","send","statusCommand","StatusNotification","errorCode","StatusNotificationConst","ERRORCODE_NOERROR","status","STATUS_CHARGING","startCommand","StartTransaction","meterStart","timestamp","Date","toISOString","startTransaction","transactionId","STATUS_AVAILABLE","StopTransaction","meterStop","stopTransaction","connector1","Connector","connector2","ChargePoint","centralSystemUrl","Math","floor","random","connectors","connect","onRequest","command","RemoteStartTransaction","RemoteStopTransaction","setTimeout","RemoteStartTransactionConst","STATUS_ACCEPTED","boot","BootNotification","chargePointVendor","chargeBoxSerialNumber","round","chargePointSerialNumber","chargePointModel","answer","sendCurrentStatus","console","error","run","BootNotificationConst","process","on","err","log","reason","p"],"mappings":"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","file":"chargingPoint.js","sourcesContent":["import { ChargePoint, Connector, OCPPCommands } from '../dist';\nimport * as BootNotificationConst from \"../dist/commands/BootNotification\";\nimport * as StatusNotificationConst from \"../dist/commands/StatusNotification\";\nimport * as RemoteStartTransactionConst from \"../dist/commands/RemoteStartTransaction\";\n\nprocess.on('uncaughtException', function (err) {\n  console.log('Caught exception: ' + err);\n});\nprocess.on('unhandledRejection', function (reason, p) {\n  console.log(\"Possibly Unhandled Rejection at: Promise \", p, \" reason: \", reason);\n});\n\nasync function run() {\n  const connector1 = new Connector(1);\n  const connector2 = new Connector(2);\n\n  const client = new ChargePoint({\n    centralSystemUrl: `http://localhost:9220/webServices/ocpp/CP${Math.floor(Math.random() * 9999)}`,\n    // centralSystemUrl: `https://ocpp-example.herokuapp.com/webServices/ocpp/CP${Math.floor(Math.random() * 9999)}`,\n    connectors: [\n      connector1,\n      connector2\n    ]\n  });\n\n  try {\n    await client.connect();\n\n    client.onRequest = async (command) => {\n      switch (true) {\n        case command instanceof OCPPCommands.RemoteStartTransaction:\n          setTimeout(() => startTransaction(command), 1);\n          return {\n            status: RemoteStartTransactionConst.STATUS_ACCEPTED\n          };\n        case command instanceof OCPPCommands.RemoteStopTransaction:\n          setTimeout(() => stopTransaction(command), 1);\n          return {\n            status: RemoteStartTransactionConst.STATUS_ACCEPTED\n          };\n      }\n    };\n\n    const boot = new OCPPCommands.BootNotification({\n      chargePointVendor: 'BrandX',\n      chargeBoxSerialNumber: 'SR' + Math.round(Math.random() * 100000),\n      chargePointSerialNumber: '123',\n      chargePointModel: '12'\n    });\n\n    let answer = await client.send(boot);\n\n    await client.sendCurrentStatus();\n  } catch (err) {\n    console.error('--- Err', err);\n  }\n\n  async function startTransaction({ connectorId }) {\n    const idTag = 'test';\n    const authCommand = new OCPPCommands.Authorize({\n      idTag\n    });\n\n    await client.send(authCommand);\n\n    const statusCommand = new OCPPCommands.StatusNotification({\n      connectorId,\n      errorCode: StatusNotificationConst.ERRORCODE_NOERROR,\n      status: StatusNotificationConst.STATUS_CHARGING\n    });\n\n    await client.send(statusCommand);\n\n    const startCommand = new OCPPCommands.StartTransaction({\n      connectorId,\n      idTag,\n      meterStart: 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    await client.send(startCommand);\n  }\n\n  async function stopTransaction({ transactionId }) {\n    const statusCommand = new OCPPCommands.StatusNotification({\n      connectorId: transactionId,\n      errorCode: StatusNotificationConst.ERRORCODE_NOERROR,\n      status: StatusNotificationConst.STATUS_AVAILABLE\n    });\n\n    await client.send(statusCommand);\n\n    const startCommand = new OCPPCommands.StopTransaction({\n      transactionId,\n      meterStop: 1,\n      timestamp: new Date().toISOString(),\n    });\n\n    await client.send(startCommand);\n  }\n}\n\n\nrun();\n"]}