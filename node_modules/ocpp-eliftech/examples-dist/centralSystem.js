'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.createServer = createServer;

var _dist = require('../dist');

var _Authorize = require('../dist/commands/Authorize');

var AuthorizeConst = _interopRequireWildcard(_Authorize);

var _StartTransaction = require('../dist/commands/StartTransaction');

var StartTransactionConst = _interopRequireWildcard(_StartTransaction);

var _ocppError = require('../dist/ocppError');

var _ocppError2 = _interopRequireDefault(_ocppError);

var _BootNotification = require('../dist/commands/BootNotification');

var BootNotificationConst = _interopRequireWildcard(_BootNotification);

var _StatusNotification = require('../dist/commands/StatusNotification');

var StatusNotificationConst = _interopRequireWildcard(_StatusNotification);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createServer(server) {
  var _this = this;

  var cSystem = new _dist.CentralSystem({
    validateConnection: validateConnection,
    wsOptions: { server: server }
  });

  cSystem.listen(null);

  cSystem.onStatusUpdate = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  cSystem.onRequest = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(client, command) {
      var connection, connectorIndex;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              connection = client.connection;


              console.info('New command from ' + connection.url);

              _context2.t0 = true;
              _context2.next = _context2.t0 === command instanceof _dist.OCPPCommands.BootNotification ? 5 : _context2.t0 === command instanceof _dist.OCPPCommands.Authorize ? 7 : _context2.t0 === command instanceof _dist.OCPPCommands.StartTransaction ? 8 : _context2.t0 === command instanceof _dist.OCPPCommands.StopTransaction ? 9 : _context2.t0 === command instanceof _dist.OCPPCommands.Heartbeat ? 10 : _context2.t0 === command instanceof _dist.OCPPCommands.StatusNotification ? 11 : 16;
              break;

            case 5:
              client.info = (0, _extends3.default)({
                connectors: []
              }, command);
              return _context2.abrupt('return', {
                status: BootNotificationConst.STATUS_ACCEPTED,
                currentTime: new Date().toISOString(),
                interval: 60
              });

            case 7:
              return _context2.abrupt('return', {
                idTagInfo: {
                  status: AuthorizeConst.STATUS_ACCEPTED
                }
              });

            case 8:
              return _context2.abrupt('return', {
                transactionId: 1,
                idTagInfo: {
                  status: StartTransactionConst.STATUS_ACCEPTED
                }
              });

            case 9:
              return _context2.abrupt('return', {
                transactionId: 1,
                idTagInfo: {
                  status: StartTransactionConst.STATUS_ACCEPTED
                }
              });

            case 10:
              return _context2.abrupt('return', {
                currentTime: new Date().toISOString()
              });

            case 11:
              // client.info = client.info || {};
              // client.info.connectors = client.info.connectors || [];

              connectorIndex = client.info.connectors.findIndex(function (item) {
                return command.connectorId === item.connectorId;
              });

              if (connectorIndex === -1) {
                client.info.connectors.push((0, _extends3.default)({}, command));
              } else {
                client.info.connectors[connectorIndex] = (0, _extends3.default)({}, command);
              }
              _context2.next = 15;
              return cSystem.onStatusUpdate();

            case 15:
              return _context2.abrupt('return', {});

            case 16:
              throw new _ocppError2.default(_ocppError.ERROR_NOTIMPLEMENTED, 'Unknown command');

            case 17:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  cSystem.toggleChargePoint = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(client, connectorId) {
      var connector, _command, command;

      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              connector = client.info.connectors.find(function (item) {
                return connectorId.toString() === item.connectorId.toString();
              });

              if (connector) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt('return', null);

            case 3:
              if (!(connector.status !== StatusNotificationConst.STATUS_AVAILABLE)) {
                _context3.next = 8;
                break;
              }

              _command = new _dist.OCPPCommands.RemoteStopTransaction({
                transactionId: connectorId
              });
              _context3.next = 7;
              return client.connection.send(_command);

            case 7:
              return _context3.abrupt('return');

            case 8:
              command = new _dist.OCPPCommands.RemoteStartTransaction({
                connectorId: connectorId,
                idTag: '' + connectorId
              });
              _context3.next = 11;
              return client.connection.send(command);

            case 11:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, _this);
    }));

    return function (_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }();
  return cSystem;

  function validateConnection(url) {
    return true;
  }
}

function timeout(ms) {
  return new _promise2.default(function (resolve) {
    return setTimeout(resolve, ms);
  });
}
//# sourceMappingURL=centralSystem.js.map