{"version":3,"sources":["../examples/server.js"],"names":["req","res","next","url","onDigits","centralSystem","onStatusUpdate","match","client","clients","toggleChargePoint","result","write","end","fs","readFile","__dirname","err","file","accept","process","on","console","log","reason","p","server","http","createServer","listen","env","PORT","writeHead","timer","setInterval","data","map","info"],"mappings":";;;;;;;;;;;;;;;sFAqCA,iBAAsBA,GAAtB,EAA2BC,GAA3B,EAAgCC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEMF,IAAIG,GAAJ,KAAY,SAFlB;AAAA;AAAA;AAAA;;AAGIC,qBAASJ,GAAT,EAAcC,GAAd;AACAI,0BAAcC,cAAd,GAA+B;AAAA,qBAAMF,SAASJ,GAAT,EAAcC,GAAd,CAAN;AAAA,aAA/B;AAJJ;;AAAA;AAOMM,iBAPN;;AAAA,kBAQMA,QAAQP,IAAIG,GAAJ,CAAQI,KAAR,CAAc,2BAAd,CARd;AAAA;AAAA;AAAA;;AASUC,kBATV,GASmBH,cAAcI,OAAd,CAAsB,CAACF,MAAM,CAAN,CAAvB,CATnB;;AAAA,iBAUQC,MAVR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAW2BH,cAAcK,iBAAd,CAAgCF,MAAhC,EAAwC,CAACD,MAAO,CAAP,CAAzC,CAX3B;;AAAA;AAWYI,kBAXZ;;AAYMV,gBAAIW,KAAJ,CAAU,yBAAe,EAAf,CAAV;;AAZN;AAcIX,gBAAIY,GAAJ;AAdJ;;AAAA;;AAkBEC,yBAAGC,QAAH,CAAeC,SAAf,kBAAuC,UAACC,GAAD,EAAMC,IAAN,EAAe;AACpD,kBAAID,GAAJ,EAAS;AACP,uBAAOf,KAAKe,GAAL,CAAP;AACD;;AAED;AACAhB,kBAAIW,KAAJ,CAAUM,IAAV;AACAjB,kBAAIY,GAAJ;AACD,aARD;;AAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeM,M;;;;;AArCf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAEAC,QAAQC,EAAR,CAAW,mBAAX,EAAgC,UAAUJ,GAAV,EAAe;AAC7CK,UAAQC,GAAR,CAAY,uBAAuBN,GAAnC;AACD,CAFD;AAGAG,QAAQC,EAAR,CAAW,oBAAX,EAAiC,UAAUG,MAAV,EAAkBC,CAAlB,EAAqB;AACpDH,UAAQC,GAAR,CAAY,2CAAZ,EAAyDE,CAAzD,EAA4D,WAA5D,EAAyED,MAAzE;AACD,CAFD;;AAIA,IAAME,SAASC,eAAKC,YAAL,CAAkBT,MAAlB,CAAf;AACA,IAAMd,gBAAgB,iCAAaqB,MAAb,CAAtB;;AAEAA,OAAOG,MAAP,CAAcT,QAAQU,GAAR,CAAYC,IAAZ,IAAoB,IAAlC;;AAEA,SAAS3B,QAAT,CAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1BA,MAAI+B,SAAJ,CAAc,GAAd,EAAmB;AACjB,oBAAgB,kCADC;AAEjB,qBAAiB;AAFA,GAAnB;;AAKA,MAAMC,QAAQC,YAAYtB,KAAZ,EAAmB,IAAnB,CAAd;AACAA;;AAEA,WAASA,KAAT,GAAiB;AACf,QAAMuB,OAAO9B,cAAcI,OAAd,CAAsB2B,GAAtB,CAA0B,kBAAU;AAC/C,aAAO5B,OAAO6B,IAAd;AACD,KAFY,CAAb;AAGApC,QAAIW,KAAJ,YAAmB,yBAAeuB,IAAf,CAAnB;AACD;AACF","file":"server.js","sourcesContent":["import http from 'http';\nimport url from 'url';\nimport fs from 'fs';\nimport querystring from 'querystring';\nimport { createServer } from './centralSystem';\n\n//var fileServer = new(require('node-static')).Server('.');\n\nprocess.on('uncaughtException', function (err) {\n  console.log('Caught exception: ' + err);\n});\nprocess.on('unhandledRejection', function (reason, p) {\n  console.log(\"Possibly Unhandled Rejection at: Promise \", p, \" reason: \", reason);\n});\n\nconst server = http.createServer(accept);\nconst centralSystem = createServer(server);\n\nserver.listen(process.env.PORT || 9220);\n\nfunction onDigits(req, res) {\n  res.writeHead(200, {\n    'Content-Type': 'text/event-stream; charset=utf-8',\n    'Cache-Control': 'no-cache'\n  });\n\n  const timer = setInterval(write, 1000);\n  write();\n\n  function write() {\n    const data = centralSystem.clients.map(client => {\n      return client.info;\n    });\n    res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n  }\n}\n\nasync function accept(req, res, next) {\n\n  if (req.url === '/status') {\n    onDigits(req, res);\n    centralSystem.onStatusUpdate = () => onDigits(req, res);\n    return;\n  }\n  let match;\n  if (match = req.url.match(/\\/connector\\/(\\d+)\\/(\\d+)/)) {\n    const client = centralSystem.clients[+match[1]];\n    if (client) {\n      const result = await centralSystem.toggleChargePoint(client, +match[ 2 ]);\n      res.write(JSON.stringify({}));\n    }\n    res.end();\n    return;\n  }\n\n  fs.readFile(`${__dirname}/index.html`, (err, file) => {\n    if (err) {\n      return next(err);\n    }\n\n    // res.set('Content-type', 'text/html');\n    res.write(file);\n    res.end();\n  });\n}\n"]}