{"version":3,"sources":["../examples/centralSystem.js"],"names":["createServer","AuthorizeConst","StartTransactionConst","BootNotificationConst","StatusNotificationConst","server","cSystem","CentralSystem","validateConnection","wsOptions","listen","onStatusUpdate","onRequest","client","command","connection","console","info","url","OCPPCommands","BootNotification","Authorize","StartTransaction","StopTransaction","Heartbeat","StatusNotification","connectors","status","STATUS_ACCEPTED","currentTime","Date","toISOString","interval","idTagInfo","transactionId","connectorIndex","findIndex","connectorId","item","push","OCPPError","ERROR_NOTIMPLEMENTED","toggleChargePoint","connector","find","toString","STATUS_AVAILABLE","RemoteStopTransaction","send","RemoteStartTransaction","idTag","timeout","ms","setTimeout","resolve"],"mappings":"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","file":"centralSystem.js","sourcesContent":["import { CentralSystem, OCPPCommands } from '../dist';\nimport * as AuthorizeConst from '../dist/commands/Authorize';\nimport * as StartTransactionConst from '../dist/commands/StartTransaction';\nimport OCPPError, { ERROR_NOTIMPLEMENTED } from '../dist/ocppError';\nimport * as BootNotificationConst from '../dist/commands/BootNotification';\nimport * as StatusNotificationConst from '../dist/commands/StatusNotification';\n\nexport\nfunction createServer(server) {\n  const cSystem = new CentralSystem({\n    validateConnection,\n    wsOptions: { server }\n  });\n\n  cSystem.listen(null);\n\n  cSystem.onStatusUpdate = async function (){};\n\n  cSystem.onRequest = async function (client, command) {\n    const connection = client.connection;\n\n    console.info(`New command from ${connection.url}`);\n\n    switch (true) {\n      case command instanceof OCPPCommands.BootNotification:\n        client.info = {\n          connectors: [],\n          ...command\n        };\n        return {\n          status: BootNotificationConst.STATUS_ACCEPTED,\n          currentTime: new Date().toISOString(),\n          interval: 60\n        };\n\n      case command instanceof OCPPCommands.Authorize:\n        return {\n          idTagInfo: {\n            status: AuthorizeConst.STATUS_ACCEPTED\n          }\n        };\n\n      case command instanceof OCPPCommands.StartTransaction:\n        return {\n          transactionId: 1,\n          idTagInfo: {\n            status: StartTransactionConst.STATUS_ACCEPTED\n          }\n        };\n\n      case command instanceof OCPPCommands.StopTransaction:\n        return {\n          transactionId: 1,\n          idTagInfo: {\n            status: StartTransactionConst.STATUS_ACCEPTED\n          }\n        };\n\n      case command instanceof OCPPCommands.Heartbeat:\n        return {\n          currentTime: new Date().toISOString()\n        };\n\n      case command instanceof OCPPCommands.StatusNotification:\n        // client.info = client.info || {};\n        // client.info.connectors = client.info.connectors || [];\n\n        const connectorIndex = client.info.connectors.findIndex(item => command.connectorId === item.connectorId);\n        if (connectorIndex === -1) {\n          client.info.connectors.push({\n            ...command\n          });\n        } else {\n          client.info.connectors[connectorIndex] = {\n            ...command\n          };\n        }\n        await cSystem.onStatusUpdate();\n        return {};\n      default:\n        throw new OCPPError(ERROR_NOTIMPLEMENTED, 'Unknown command');\n    }\n  };\n\n  cSystem.toggleChargePoint = async (client, connectorId) => {\n    const connector = client.info.connectors.find(item => connectorId.toString() === item.connectorId.toString());\n    if (!connector) {\n      return null;\n    }\n\n    if (connector.status !== StatusNotificationConst.STATUS_AVAILABLE) {\n      let command = new OCPPCommands.RemoteStopTransaction({\n        transactionId: connectorId\n      });\n      await client.connection.send(command);\n      return;\n    }\n\n    let command = new OCPPCommands.RemoteStartTransaction({\n      connectorId: connectorId,\n      idTag: '' + connectorId\n    });\n\n    await client.connection.send(command);\n  };\n  return cSystem;\n\n  function validateConnection(url) {\n    return true;\n  }\n}\n\nfunction timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"]}