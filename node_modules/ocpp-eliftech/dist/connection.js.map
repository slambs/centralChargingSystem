{"version":3,"sources":["../src/connection.js"],"names":["debug","DEBUG_LIBNAME","Connection","socket","req","requests","url","ip","connection","remoteAddress","headers","protocol","on","msg","onMessage","err","console","info","message","messageType","messageId","commandNameOrPayload","commandPayload","errorDetails","JSON","parse","Error","CALL_MESSAGE","CALLRESULT_MESSAGE","CALLERROR_MESSAGE","CommandModel","commands","commandRequest","responseData","responseObj","sendError","OCPPError","ERROR_FORMATIONVIOLATION","onRequest","createResponse","sendMessage","responseCallback","rejectCallback","command","error","ERROR_INTERNALERROR","self","commandValues","resolve","reject","messageToSend","onResponse","onRejectResponse","commandName","getCommandName","code","details","readyState","Websocket","OPEN","send","setTimeout","SOCKET_TIMEOUT","payload","response","reason","request"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAOA;;AACA;;;;;;AAKA,IAAMA,QAAQ,qBAAQC,wBAAR,CAAd;;IAGMC,U,WAAAA,U;AACJ,sBAAaC,MAAb,EAAiC;AAAA;;AAAA,QAAZC,GAAY,uEAAN,IAAM;AAAA;;AAC/B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,QAAL,GAAgB,EAAhB;;AAEA,QAAID,GAAJ,EAAS;AACP,WAAKE,GAAL,GAAWF,OAAOA,IAAIE,GAAtB;AACA,UAAMC,KAAKH,QAASA,IAAII,UAAJ,IAAkBJ,IAAII,UAAJ,CAAeC,aAAlC,IAAoDL,IAAIM,OAAJ,CAAa,iBAAb,CAA5D,CAAX;;AAEAV,sCAA8BO,EAA9B,qBAAgDJ,OAAOQ,QAAvD,gBAA0E,KAAKL,GAA/E;AACD,KALD,MAKO;AACL,WAAKA,GAAL,GAAW,QAAX;AACAN;AACD;;AAEDG,WAAOS,EAAP,CAAU,SAAV,EAAqB,UAACC,GAAD;AAAA,aAAS,MAAKC,SAAL,CAAeD,GAAf,CAAT;AAAA,KAArB;;AAEAV,WAAOS,EAAP,CAAU,OAAV,EAAmB,UAACG,GAAD,EAAS;AAC1BC,cAAQC,IAAR,CAAaF,GAAb;AACD,KAFD;AAGD;;;;;2GAEgBG,O;;;;;;;AACXC,2B,WAAaC,S,WAAWC,oB,WAAsBC,c,WAAgBC,Y;;8BAGeC,KAAKC,KAAL,CAAWP,OAAX,C;;AAA9EC,2B;AAAaC,yB;AAAWC,oC;AAAsBC,8B;AAAgBC,4B;;;;;;;sBAEzD,IAAIG,KAAJ,gCAAuCR,OAAvC,WAAoD,YAAIA,OAAxD,C;;;8BAGAC,W;gDACDQ,uB,wBA6BAC,6B,wBAYAC,4B;;;;AAxCH;AACA7B,8BAAY,KAAKM,GAAjB,UAAyBY,OAAzB;;AAEMY,4B,GAAeC,mBAASV,oBAAT,C;;oBAChBS,Y;;;;;sBACG,IAAIJ,KAAJ,sBAA6BL,oBAA7B,C;;;AAEJW,8B,WAAgBC,Y,WAAcC,W;;;AAEhCF,iCAAiB,IAAIF,YAAJ,CAAiBR,cAAjB,CAAjB;;;;;;;;uBAGa,KAAKa,SAAL,CAAef,SAAf,EAA0B,IAAIgB,mBAAJ,CAAcC,mCAAd,EAAwC,YAAInB,OAA5C,CAA1B,C;;;;;;;;uBAIQ,KAAKoB,SAAL,CAAeN,cAAf,C;;;AAArBC,4B;;AACAC,8BAAcF,eAAeO,cAAf,CAA8BN,YAA9B,CAAd;;;;;;;;uBAEa,KAAKE,SAAL,CAAef,SAAf,c;;;;;;;;uBAIP,KAAKoB,WAAL,CAAiBpB,SAAjB,EAA4Bc,WAA5B,EAAyCN,6BAAzC,C;;;;;;;;;;uBAEA,KAAKO,SAAL,CAAef,SAAf,c;;;;;;AAIR;AACApB,8BAAY,KAAKM,GAAjB,UAAyBY,OAAzB;;mEAE2B,KAAKb,QAAL,CAAce,SAAd,C,MAApBqB,gB;;oBACFA,gB;;;;;sBACG,IAAIf,KAAJ,mCAA0CN,SAA1C,C;;;AAER,uBAAO,KAAKf,QAAL,CAAce,SAAd,CAAP;;AAEAqB,iCAAiBpB,oBAAjB;;;;AAGA;AACArB,8BAAY,KAAKM,GAAjB,UAAyBY,OAAzB;;oBAEK,KAAKb,QAAL,CAAce,SAAd,C;;;;;sBACG,IAAIM,KAAJ,mCAA0CN,SAA1C,C;;;oEAEmB,KAAKf,QAAL,CAAce,SAAd,C,MAAlBsB,c;;AACT,uBAAO,KAAKrC,QAAL,CAAce,SAAd,CAAP;;AAEAsB,+BAAe,IAAIN,mBAAJ,CAAcf,oBAAd,EAAoCC,cAApC,EAAoDC,YAApD,CAAf;;;;sBAGM,IAAIG,KAAJ,yBAAgCP,WAAhC,C;;;;;;;;;;;;;;;;;;yBAINwB,O,EAAqC;AAAA,UAA5BxB,WAA4B,uEAAdQ,uBAAc;;AACzC,aAAO,KAAKa,WAAL,CAAiB,kBAAjB,EAAyBG,OAAzB,EAAkCxB,WAAlC,CAAP;AACD;;;8BAEUC,S,EAAWL,G,EAAK;AACzBf,wBAAgBe,IAAIG,OAApB;;AAEA,UAAM0B,QAAQ7B,eAAeqB,mBAAf,GAA2BrB,GAA3B,GAAiC,IAAIqB,mBAAJ,CAAcS,8BAAd,EAAmC9B,IAAIG,OAAvC,CAA/C;;AAEA,aAAO,KAAKsB,WAAL,CAAiBpB,SAAjB,EAA4BwB,KAA5B,EAAmCf,4BAAnC,CAAP;AACD;;;gCAEYT,S,EAAWuB,O,EAA2C;AAAA;;AAAA,UAAlCxB,WAAkC,uEAApBS,6BAAoB;;AACjE,UAAMzB,SAAS,KAAKA,MAApB;AACA,UAAM2C,OAAO,IAAb;AACA,UAAMC,gBAAgB,8BAAgBJ,OAAhB,CAAtB;;AAEA,aAAO,sBAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,sBAAJ;;AAEA,gBAAQ/B,WAAR;AACE,eAAKQ,uBAAL;AACE,mBAAKtB,QAAL,CAAce,SAAd,IAA2B,CAAC+B,UAAD,EAAaC,gBAAb,CAA3B;AACA,gBAAMC,cAAcV,QAAQW,cAAR,EAApB;;AAEAJ,4BAAgB,yBAAe,CAAC/B,WAAD,EAAcC,SAAd,EAAyBiC,WAAzB,EAAsCN,aAAtC,CAAf,CAAhB;AACA;AACF,eAAKnB,6BAAL;AACEsB,4BAAgB,yBAAe,CAAC/B,WAAD,EAAcC,SAAd,EAAyB2B,aAAzB,CAAf,CAAhB;AACA;AACF,eAAKlB,4BAAL;AAAA,gBACU0B,IADV,GACqCZ,OADrC,CACUY,IADV;AAAA,gBACgBrC,OADhB,GACqCyB,OADrC,CACgBzB,OADhB;AAAA,gBACyBsC,OADzB,GACqCb,OADrC,CACyBa,OADzB;;AAEEN,4BAAgB,yBAAe,CAAC/B,WAAD,EAAcC,SAAd,EAAyBmC,IAAzB,EAA+BrC,OAA/B,EAAwCsC,OAAxC,CAAf,CAAhB;AACA;AAbJ;;AAgBAxD,sBAAYkD,aAAZ;AACA,YAAI/C,OAAOsD,UAAP,KAAsBC,aAAUC,IAApC,EAA0C;AACxCxD,iBAAOyD,IAAP,CAAYV,aAAZ;AACD,SAFD,MAEO;AACL,iBAAOE,oCAAkChC,SAAlC,CAAP;AACD;AACD,YAAID,gBAAgBQ,uBAApB,EAAkC;AAChCqB;AACD,SAFD,MAEO;AACLa,qBAAW;AAAA,mBAAMT,0CAAwChC,SAAxC,CAAN;AAAA,WAAX,EAAuE0C,yBAAvE;AACD;;AAED,iBAASX,UAAT,CAAqBY,OAArB,EAA8B;AAC5B,cAAMC,WAAWrB,QAAQJ,cAAR,CAAuBwB,OAAvB,CAAjB;;AAEA,iBAAOf,QAAQgB,QAAR,CAAP;AACD;AACD,iBAASZ,gBAAT,CAA0Ba,MAA1B,EAAkC;AAChCnB,eAAKzC,QAAL,CAAce,SAAd,IAA2B,YAAM,CAAE,CAAnC;AACA,cAAMwB,QAAQqB,kBAAkB7B,mBAAlB,GAA8B6B,MAA9B,GAAuC,IAAIvC,KAAJ,CAAUuC,MAAV,CAArD;AACAhB,iBAAOL,KAAP;AACD;AACF,OAzCM,CAAP;AA0CD;;;8BAEUsB,O,EAAS,CAEnB","file":"connection.js","sourcesContent":["import uuid from 'uuid/v4';\nimport Websocket from 'ws';\nimport debugFn from 'debug';\nimport commands from './commands';\nimport {\n  DEBUG_LIBNAME,\n  CALL_MESSAGE,\n  CALLRESULT_MESSAGE,\n  CALLERROR_MESSAGE,\n  SOCKET_TIMEOUT\n} from './constants';\nimport { getObjectValues } from './helpers';\nimport OCPPError, {\n  ERROR_FORMATIONVIOLATION,\n  ERROR_INTERNALERROR\n} from './ocppError';\n\nconst debug = debugFn(DEBUG_LIBNAME);\n\nexport\nclass Connection {\n  constructor (socket, req = null) {\n    this.socket = socket;\n    this.req = req;\n    this.requests = {};\n\n    if (req) {\n      this.url = req && req.url;\n      const ip = req && ((req.connection && req.connection.remoteAddress) || req.headers[ 'x-forwarded-for' ]);\n\n      debug(`New connection from \"${ip}\", protocol \"${socket.protocol}\", url \"${this.url}\"`);\n    } else {\n      this.url = 'SERVER';\n      debug(`New connection to server`);\n    }\n\n    socket.on('message', (msg) => this.onMessage(msg));\n\n    socket.on('error', (err) => {\n      console.info(err);\n    });\n  }\n\n  async onMessage (message) {\n    let messageType, messageId, commandNameOrPayload, commandPayload, errorDetails;\n\n    try {\n      [messageType, messageId, commandNameOrPayload, commandPayload, errorDetails] = JSON.parse(message);\n    } catch (err) {\n      throw new Error(`Failed to parse message: \"${message}\", ${err.message}`);\n    }\n\n    switch (messageType) {\n      case CALL_MESSAGE:\n        // request\n        debug(`>> ${this.url}: ${message}`);\n\n        const CommandModel = commands[commandNameOrPayload];\n        if (!CommandModel) {\n          throw new Error(`Unknown command ${commandNameOrPayload}`);\n        }\n        let commandRequest, responseData, responseObj;\n        try {\n          commandRequest = new CommandModel(commandPayload);\n        } catch (err) {\n          // send error if payload didn't pass the validation\n          return await this.sendError(messageId, new OCPPError(ERROR_FORMATIONVIOLATION, err.message));\n        }\n\n        try {\n          responseData = await this.onRequest(commandRequest);\n          responseObj = commandRequest.createResponse(responseData);\n        } catch (err) {\n          return await this.sendError(messageId, err);\n        }\n\n        try {\n          await this.sendMessage(messageId, responseObj, CALLRESULT_MESSAGE);\n        } catch (err) {\n          await this.sendError(messageId, err);\n        }\n        break;\n      case CALLRESULT_MESSAGE:\n        // response\n        debug(`>> ${this.url}: ${message}`);\n\n        const [responseCallback] = this.requests[messageId];\n        if (!responseCallback) {\n          throw new Error(`Response for unknown message ${messageId}`);\n        }\n        delete this.requests[messageId];\n\n        responseCallback(commandNameOrPayload);\n        break;\n      case CALLERROR_MESSAGE:\n        // error response\n        debug(`>> ${this.url}: ${message}`);\n\n        if (!this.requests[messageId]) {\n          throw new Error(`Response for unknown message ${messageId}`);\n        }\n        const [, rejectCallback] = this.requests[messageId];\n        delete this.requests[messageId];\n\n        rejectCallback(new OCPPError(commandNameOrPayload, commandPayload, errorDetails));\n        break;\n      default:\n        throw new Error(`Wrong message type ${messageType}`);\n    }\n  }\n\n  send (command, messageType = CALL_MESSAGE) {\n    return this.sendMessage(uuid(), command, messageType);\n  }\n\n  sendError (messageId, err) {\n    debug(`Error: ${err.message}`);\n\n    const error = err instanceof OCPPError ? err : new OCPPError(ERROR_INTERNALERROR, err.message);\n\n    return this.sendMessage(messageId, error, CALLERROR_MESSAGE);\n  }\n\n  sendMessage (messageId, command, messageType = CALLRESULT_MESSAGE) {\n    const socket = this.socket;\n    const self = this;\n    const commandValues = getObjectValues(command);\n\n    return new Promise((resolve, reject) => {\n      let messageToSend;\n\n      switch (messageType) {\n        case CALL_MESSAGE:\n          this.requests[messageId] = [onResponse, onRejectResponse];\n          const commandName = command.getCommandName();\n\n          messageToSend = JSON.stringify([messageType, messageId, commandName, commandValues]);\n          break;\n        case CALLRESULT_MESSAGE:\n          messageToSend = JSON.stringify([messageType, messageId, commandValues]);\n          break;\n        case CALLERROR_MESSAGE:\n          const { code, message, details } = command;\n          messageToSend = JSON.stringify([messageType, messageId, code, message, details]);\n          break;\n      }\n\n      debug(`<< ${messageToSend}`);\n      if (socket.readyState === Websocket.OPEN) {\n        socket.send(messageToSend);\n      } else {\n        return onRejectResponse(`Socket closed ${messageId}`);\n      }\n      if (messageType !== CALL_MESSAGE) {\n        resolve();\n      } else {\n        setTimeout(() => onRejectResponse(`Timeout for message ${messageId}`), SOCKET_TIMEOUT);\n      }\n\n      function onResponse (payload) {\n        const response = command.createResponse(payload);\n\n        return resolve(response);\n      }\n      function onRejectResponse(reason) {\n        self.requests[messageId] = () => {};\n        const error = reason instanceof OCPPError ? reason : new Error(reason);\n        reject(error);\n      }\n    });\n  }\n\n  onRequest (request) {\n\n  }\n}\n"]}