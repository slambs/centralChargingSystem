{"version":3,"sources":["../src/chargePoint.js"],"names":["debug","DEBUG_LIBNAME","ChargePoint","options","connectors","centralSystemUrl","reconnectTimer","reconnectInterval","self","resolve","reject","ws","WebSocket","OCPP_PROTOCOL_1_6","perMessageDeflate","protocolVersion","on","res","headers","Error","connection","nextReconnectAttempt","removeAllListeners","Connection","onRequest","command","clearInterval","setTimeout","connect","send","promises","getConnectors","map","connector","status","timestamp","Date","toISOString","statusCommand","Commands","StatusNotification","all"],"mappings":"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","file":"chargePoint.js","sourcesContent":["import WebSocket from 'ws';\nimport debugFn from 'debug';\nimport Commands from './commands';\nimport { Connection } from './connection';\n\nimport {\n  OCPP_PROTOCOL_1_6,\n  DEBUG_LIBNAME\n} from './constants';\n\nconst debug = debugFn(DEBUG_LIBNAME);\n\nexport default class ChargePoint {\n  /**\n   * Create OCPP client\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.centralSystemUrl The url where to connect\n   * @param {String} options.reconnectInterval The number of milliseconds to delay before attempting to reconnect (default: 5 minutes)\n   * @param {String} options.connectors Array of virtual connectors\n   */\n  constructor (options) {\n    options.connectors = options.connectors || [];\n\n    this.options = options;\n  }\n\n  connect () {\n    debug(`Try connect to ${this.options.centralSystemUrl}`);\n\n    let reconnectTimer;\n    const reconnectInterval = this.options.reconnectInterval || 5 * 60 * 1000; // 5 minutes\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(this.options.centralSystemUrl, [OCPP_PROTOCOL_1_6], {\n        perMessageDeflate: false,\n        protocolVersion: 13\n      });\n\n      ws.on('upgrade', (res) => {\n        if (!res.headers['sec-websocket-protocol']) {\n          return reject(new Error(`Server doesn't support protocol ${OCPP_PROTOCOL_1_6}`));\n        }\n      });\n\n      ws.on('close', () => {\n        debug(`Connection is closed`);\n        this.connection = null;\n        nextReconnectAttempt();\n      });\n      ws.on('open', () => {\n        ws.removeAllListeners('error');\n\n        this.connection = new Connection(ws);\n        this.connection.onRequest = (command) => this.onRequest(command);\n\n        resolve(this.connection);\n      });\n\n      ws.on('error', reject);\n    });\n\n    function nextReconnectAttempt () {\n      if (reconnectTimer) {\n        clearInterval(reconnectTimer);\n        reconnectTimer = null;\n      }\n\n      reconnectTimer = setTimeout(async () => {\n        try {\n          await self.connect();\n        } catch (err) {\n        }\n      }, reconnectInterval);\n    }\n  }\n\n  send (command) {\n    if (!this.connection) {\n      return false;\n    }\n    return this.connection.send(command);\n  }\n\n  onRequest (command) {\n  }\n\n  getConnectors () {\n    return this.options.connectors;\n  }\n\n  async sendCurrentStatus() {\n    const promises = this.getConnectors().map(async (connector) => {\n      const status = {\n        timestamp: new Date().toISOString(),\n        ...connector\n      };\n      const statusCommand = new Commands.StatusNotification(status);\n\n      await this.send(statusCommand)\n    });\n\n    return await Promise.all(promises);\n  }\n}\n"]}